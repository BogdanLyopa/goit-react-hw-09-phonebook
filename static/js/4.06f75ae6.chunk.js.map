{"version":3,"sources":["Components/Form/Form.module.css","Components/ContactsList/ContactsListItem/ContactsListItem.module.css","Components/Filter/Filter.module.css","redux/contacts/contactsOperations.js","redux/contacts/contactsSelectors.js","Components/Form/Form.js","Components/ContactsList/ContactsListItem/ContactsListItem.js","Components/ContactsList/ContactsList.js","Components/Filter/Filter.js","views/ContactsView.js"],"names":["module","exports","dispatch","a","fetchContactsRequest","axios","get","data","fetchContactsSuccess","fetchContactsError","contact","addContactRequest","post","addContactSuccess","addContactError","contactId","removeContactRequest","delete","removeContactSuccess","removeContactError","getLoading","state","contacts","loading","getContacts","items","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","getError","error","Form","useState","setName","number","setNumber","useDispatch","useSelector","nameInputId","uuidv4","numberInputId","handleChange","event","target","value","reset","className","styles","form","onSubmit","preventDefault","check","find","alert","handleCheckUniqueContact","contactsOperations","label","htmlFor","type","pattern","title","required","placeholder","onChange","id","button","ContactsListItem","onRemove","item","onClick","ContactsList","length","TransitionGroup","component","map","CSSTransition","timeout","classNames","Filter","filterLabel","changedFilter","ContactsView","isLoading","useEffect","contactsOperation","in","appear","unmountOnExit","color","height","width","message"],"mappings":"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","file":"static/js/4.06f75ae6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Form_button__3dnwz\",\"label\":\"Form_label__26cxX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactsListItem_button__2A6nJ\",\"item\":\"ContactsListItem_item__102IR\",\"name\":\"ContactsListItem_name__2Au4-\",\"item-fade-enter\":\"ContactsListItem_item-fade-enter__1zisU\",\"item-fade-enter-active\":\"ContactsListItem_item-fade-enter-active__2PR2Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"Filter_filterLabel__3QCfF\"};","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from './contactsAction';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\n\r\nconst addContact = contact => async dispatch => {\r\n  dispatch(addContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post('/contacts', contact);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  }\r\n};\r\n\r\nconst removeContact = contactId => async dispatch => {\r\n  dispatch(removeContactRequest());\r\n\r\n  try {\r\n    await axios.delete(`/contacts/${contactId}`);\r\n    dispatch(removeContactSuccess(contactId));\r\n  } catch (error) {\r\n    dispatch(removeContactError(error));\r\n  }\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n  fetchContacts,\r\n  addContact,\r\n  removeContact,\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getLoading = state => state.contacts.loading;\r\n\r\nexport const getContacts = state => state.contacts.items;\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nexport const getError = state => state.contacts.error;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport styles from './Form.module.css';\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\nimport { getContacts } from '../../redux/contacts/contactsSelectors';\r\n\r\nexport default function Form() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const contacts = useSelector(getContacts);\r\n\r\n  const nameInputId = uuidv4();\r\n  const numberInputId = uuidv4();\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleCheckUniqueContact = name => {\r\n    const check = contacts.find(contact => {\r\n      return contact.name === name;\r\n    });\r\n    if (check) {\r\n      alert('Contact is already exist');\r\n      return check;\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    if (handleCheckUniqueContact(name)) {\r\n      reset();\r\n      return;\r\n    }\r\n    dispatch(contactsOperations.addContact({ name, number }));\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form className={styles.form} onSubmit={handleSubmit}>\r\n        <label className={styles.label} htmlFor={nameInputId}>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            placeholder=\"Enter name\"\r\n            value={name}\r\n            onChange={handleChange}\r\n            id={nameInputId}\r\n          />\r\n        </label>\r\n\r\n        <label className={styles.label} htmlFor={numberInputId}>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            required\r\n            placeholder=\"Enter phone number\"\r\n            value={number}\r\n            onChange={handleChange}\r\n            id={numberInputId}\r\n          />\r\n        </label>\r\n\r\n        <button className={styles.button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import styles from './ContactsListItem.module.css';\r\nimport PhoneIphoneIcon from '@material-ui/icons/PhoneIphone';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\n\r\nconst ContactsListItem = ({ id, name, number, onRemove }) => {\r\n  return (\r\n    <li className={styles.item}>\r\n      <span>\r\n        <PhoneIphoneIcon />\r\n        <span className={styles.name}> {name} : </span>\r\n        <span className={styles.number}>{number}</span>\r\n      </span>\r\n\r\n      <button className={styles.button} onClick={() => onRemove(id)}>\r\n        <HighlightOffIcon />\r\n        Remove\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ContactsListItem;\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport ContactsListItem from './ContactsListItem/ContactsListItem';\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\nimport { getVisibleContacts } from '../../redux/contacts/contactsSelectors';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport './ContactListFade.css';\r\n\r\nexport default function ContactsList() {\r\n  const contacts = useSelector(getVisibleContacts);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onRemove = id => dispatch(contactsOperations.removeContact(id));\r\n  if (contacts.length === 0) return null;\r\n\r\n  return (\r\n    <>\r\n      <h2 className=\"title\">Contacts</h2>\r\n      <TransitionGroup component=\"ul\">\r\n        {contacts.map(contact => (\r\n          <CSSTransition key={contact.id} timeout={250} classNames=\"item-fade\">\r\n            <ContactsListItem\r\n              key={contact.id}\r\n              {...contact}\r\n              onRemove={() => onRemove(contact.id)}\r\n            />\r\n          </CSSTransition>\r\n        ))}\r\n      </TransitionGroup>\r\n    </>\r\n  );\r\n}\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport styles from './Filter.module.css';\r\nimport { changedFilter } from '../../redux/contacts/contactsAction';\r\nimport { getFilter } from '../../redux/contacts/contactsSelectors';\r\n\r\nexport default function Filter() {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  const onChange = event => dispatch(changedFilter(event.target.value));\r\n\r\n  return (\r\n    <label className={styles.filterLabel}>\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={value}\r\n        onChange={onChange}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n      />\r\n    </label>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport contactsOperation from '../redux/contacts/contactsOperations';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport Form from '../Components/Form';\r\nimport ContactsList from '../Components/ContactsList';\r\nimport Filter from '../Components/Filter';\r\nimport Loader from 'react-loader-spinner';\r\nimport {\r\n  getLoading,\r\n  getContacts,\r\n  getError,\r\n} from '../redux/contacts/contactsSelectors';\r\nexport default function ContactsView() {\r\n  const contacts = useSelector(getContacts);\r\n  const isLoading = useSelector(getLoading);\r\n  const error = useSelector(getError);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperation.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"phone-form\">\r\n        <CSSTransition\r\n          in={true}\r\n          appear={true}\r\n          classNames=\"fade\"\r\n          timeout={2000}\r\n          unmountOnExit\r\n        >\r\n          <h1 className=\"title\">Phonebook</h1>\r\n        </CSSTransition>\r\n        <Form />\r\n        {contacts.length > 0 && <Filter />}\r\n      </div>\r\n\r\n      <div>\r\n        {isLoading && (\r\n          <Loader\r\n            className=\"loader\"\r\n            type=\"TailSpin\"\r\n            color=\"cornflowerblue\"\r\n            height={50}\r\n            width={50}\r\n          />\r\n        )}\r\n        {error && <p className=\"error-message\">{error.message}</p>}\r\n        <ContactsList />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}